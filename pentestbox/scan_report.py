import nmap
from docx import Document


def scan_ports(host, port_range):
    open_ports = []
    nm = nmap.PortScanner()
    ports = ','.join(str(p) for p in range(*port_range))
    nm.scan(hosts=host, ports=ports, arguments='-sV')

    for host in nm.all_hosts():
        for proto in nm[host].all_protocols():
            port_info = nm[host][proto].items()
            for port, info in port_info:
                if info['state'] == 'open':
                    open_ports.append((port, info['name'], info['product'], info['version']))

    return open_ports


def scan_network(network_address):
    nm = nmap.PortScanner()
    nm.scan(hosts=network_address, arguments='-sn')

    hosts_list = [(x, nm[x]['status']['state']) for x in nm.all_hosts()]
    return hosts_list


def write_report(host, open_ports, hosts_list, filename):
    doc = Document()
    
    doc.add_heading('Sammanfattning', level=1)
    doc.add_paragraph('Skriv en sammanfattning av rapporten.')

    
    doc.add_heading('Inledning', level=1)
    doc.add_paragraph('Beskrivning av vad som är överenskommet med kund, vilket syftet är och beskrivning inom vilka ramar arbetet ska utföras. ')

    
    doc.add_heading('Riskbedömning', level=1)
    doc.add_paragraph('Beskrivning av vilka potentiella risker för företaget av hittade sårbarheter. ')


    
    doc.add_heading('Testmetodik', level=1)
    doc.add_paragraph('Beskrivning av vilken testmetodik som användes under testningen, inklusive vilka verktyg och tekniker som använts.')


    
    doc.add_heading('Testmiljö', level=1)
    doc.add_paragraph('Beskriv hur miljön som är testat ser ut, arkitektur, nätverket, system, tekniska spcifikationer och konfigurationer.')


    
    doc.add_heading('Testmetodik', level=1)
    doc.add_paragraph('Beskriv hur miljön som är testat ser ut, arkitektur, nätverket, system, tekniska spcifikationer och konfigurationer.')


    
    doc.add_heading('Resultat', level=1)
    doc.add_paragraph('En summering av vilka resultat som framkommit av testningen. ')
    
    doc.add_heading('Analys', level=1)
    doc.add_paragraph('Övergripande observationer av testningen.')

    doc.add_heading('Rekommendationer för åtgärder', level=1)
    doc.add_paragraph('Skriv vilka rekommendationer för att minska riskerna till alla hittade resultat.')

    # Port Scan Report
    doc.add_heading(f'Skannade portar på ip {host}', level=1)
    if open_ports:
        doc.add_heading('Öppna portar', level=2)
        for port, name, product, version in open_ports:
            doc.add_paragraph(f'Port: {port}, Namn: {name}, Tjänst: {product}, Version: {version}')
    else:
        doc.add_paragraph('Inga öppna portar hittades. ')

    # Network Scan Report
    if hosts_list:
        doc.add_heading('Skannat nätverk', level=2)
        for host, status in hosts_list:
            doc.add_paragraph(f'Enhet: {host}, Status: {status}')
    else:
        doc.add_paragraph('Hittades inga enheter på nätverket. ')


    doc.save(filename)
    print(f"En rapport har skapats: {filename}")

    
    
def main():
    network_address = input("Skriv i en nätverksadress som ska skannas (t.ex. 192.168.0.0/24): ")
    host = input("Skriv in en IP-adress som ska skannas: ")
    

    target_port_range = (20, 2122)
    open_ports = scan_ports(host, target_port_range)
    hosts_list = scan_network(network_address)

    report_filename = f'rapport_penetrationstest_{host}.docx'
    write_report(host, open_ports, hosts_list, report_filename)

if __name__ == "__main__":
    main()

