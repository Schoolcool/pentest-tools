import datetime
import nmap
from docx import Document


def scan_ports(target_host, port_range):
    """Scans for open ports and vulnerabilities."""
    open_ports = []
    vulnerabilities = []
    nm = nmap.PortScanner()
    ports = ','.join(str(p) for p in range(*port_range))
    nm.scan(hosts=target_host, ports=ports, arguments='-sV --script=vuln')

    for host in nm.all_hosts():
        for proto in nm[host].all_protocols():
            port_info = nm[host][proto].items()
            for port, info in port_info:
                if info['state'] == 'open':
                    open_ports.append((port, info['name'], info['product'], info['version']))
                    if 'script' in info:
                        print(f"Sårbarheter för port {port}: {info['script']}")
                        if isinstance(info['script'], list):  # Check if script is a list
                            for script in info['script']:
                                if 'id' in script:  # Check if 'id' key exists
                                    vulnerabilities.append((port, script.get('id', "N/A"), script.get('output', "No output")))
                                else:
                                    vulnerabilities.append((port, "N/A", script.get('output', "No output")))  # 'id' not available
                        else:  # If script is not a list, assume it's a dictionary
                            if 'id' in info['script']:  # Check if 'id' key exists
                                vulnerabilities.append((port, info['script'].get('id', "N/A"), info['script'].get('output', "No output")))
                            else:
                                vulnerabilities.append((port, "N/A", info['script'].get('output', "No output")))  # 'id' not available

    return open_ports, vulnerabilities



def scan_network(network_address):
    """Scans the network."""
    nm = nmap.PortScanner()
    nm.scan(hosts=network_address, arguments='-sn')

    hosts_list = [(x, nm[x]['status']['state']) for x in nm.all_hosts()]
    return hosts_list


def write_report(target_host, open_ports, vulnerabilities, hosts_list, filename):
    """Writes the report."""
    try:
        doc = Document()
        doc.add_heading('Summary', level=1)
        doc.add_paragraph('Write a summary of the report.')

        # Other sections of the report...

        # Port Scan Report
        doc.add_heading(f'Scanned ports on IP {target_host}', level=1)
        if open_ports:
            doc.add_heading('Open ports', level=2)
            for port, name, product, version in open_ports:
                doc.add_paragraph(f'Port: {port}, Name: {name}, Service: {product}, Version: {version}')
        else:
            doc.add_paragraph('No open ports found.')

        # Vulnerability Report
        if vulnerabilities:
            doc.add_heading('Vulnerabilities', level=2)
            for port, vuln_id, output in vulnerabilities:
                doc.add_paragraph(f'Port: {port}, Vulnerability ID: {vuln_id}\n{output}')
        else:
            doc.add_paragraph('No vulnerabilities found.')

        # Network Scan Report
        if hosts_list:
            doc.add_heading('Scanned network', level=2)
            for host, status in hosts_list:
                doc.add_paragraph(f'Device: {host}, Status: {status}')
        else:
            doc.add_paragraph('No devices found on the network.')

        doc.save(filename)
        print(f"A report has been created: {filename}")
    except Exception as e:
        print("An error occurred while writing the report:", e)


def main():
    """Main function."""
    network_address = input("Enter a network address to scan (e.g., 192.168.0.0/24): ")
    target_host = input("Enter an IP address to scan: ")

    # Terminal displays start time
    start_time = datetime.datetime.now()
    print("Penetration testing report started:", start_time)

    target_port_range = (20, 2122)
    open_ports, vulnerabilities = scan_ports(target_host, target_port_range)
    hosts_list = scan_network(network_address)

    report_filename = f'penetration_test_report_{target_host}.docx'
    write_report(target_host, open_ports, vulnerabilities, hosts_list, report_filename)

    # Terminal displays end time
    end_time = datetime.datetime.now()
    print("Penetration testing report completed:", end_time)
    print("Total time to run the script:", end_time - start_time)


if __name__ == "__main__":
    main()
